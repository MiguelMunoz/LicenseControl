/*
 * LicenseBroker
 * Limits usage of a license
 *
 * OpenAPI spec version: 1.0.0
 * Contact: SwingGuy1024@yahoo.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Constants
 */

@SuppressWarnings("ALL")
public class Constants {
  @SerializedName("keepAliveTimeSeconds")
  private Integer keepAliveTimeSeconds = 6;

  public Constants keepAliveTimeSeconds(Integer keepAliveTimeSeconds) {
    this.keepAliveTimeSeconds = keepAliveTimeSeconds;
    return this;
  }

   /**
   * Get keepAliveTimeSeconds
   * @return keepAliveTimeSeconds
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getKeepAliveTimeMillis() {
    return keepAliveTimeSeconds;
  }

  public void setKeepAliveTimeSeconds(Integer keepAliveTimeSeconds) {
    this.keepAliveTimeSeconds = keepAliveTimeSeconds;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if ((o == null) || (getClass() != o.getClass())) {
      return false;
    }
    Constants constants = (Constants) o;
    return Objects.equals(this.keepAliveTimeSeconds, constants.keepAliveTimeSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keepAliveTimeSeconds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Constants {\n");
    
    sb.append("    keepAliveTimeSeconds: ").append(toIndentedString(keepAliveTimeSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

